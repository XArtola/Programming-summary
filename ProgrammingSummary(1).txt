Print
Sysout = System.out.println();
	 System.out.print();

Import classes:

	import java.util.Scanner;
	import java.lang.Integer;

	import java.util.regex.*;
	import java.util.Arrays;
	import java.lang.Object;
	import java.lang.Character;
	import java.io.*; to use file
	import java.util.ArrayList;
	import java.util.ListIterator

		


Math opertaions

	+
	-
	*
	/
	%

Scanner class:

	Definig: Scanner nameOfTheScanner = new Scanner(System.in);
	Closing: nameOfTheScanner.close();

	hasNextLong();
	useDelimiter("pattern"); REGULAR EXPRESSIONS
	nextLine():
	hasNextLine()

Loop Structures

	While(){}

	Switch(value){

		case "value":

		break;


		default:

		break;
	}

	for(counter; condition; what to do){}

	do{}while()

Comparing

	== Equal
	!= Not equal
	&& And
	|| Or

	! reverse
	> bigger than
	>= bigger or equal than
	< smaller than
	<= smaller or equal than

	
Conditionals


	if(){}
	else if(){}
	else()

	continue
	break

String class

	hasNextLine: will return true if there is a new line
	length(): it return the number of cells of the string (int)
	substring(int startIndex, int finishIndex): it takes part of the string
	trim(): it erases the blank spaces before and after the string __aaa___ --> aaa
	chatAt(int indexPos): it takes th echaracter of the selected position
	compareTo("String"): it returns negative is the first is smalle 0 if they are the same and positive if it is bigger
	compareToIgnoreCase("string"): the same as the previous but without taking account of upper or lower
	indexOf("string"): it returns the index number (int) of the pattern in a string	
	lastIndexOf: the same as the previous but the last time
	valueOf(): returns the primitive value of th entered (String.valueOf(convertThis))
	nextBoolean: it takes the next boolean
	matches VS equals --> https://stackoverflow.com/questions/9700115/difference-between-matches-and-equalsignorecase-or-equals-in-string-class
	toLowerCase: it converts all the characters into lowercase
	split():


Function

public static [return type] [Function name] ([taken value]){}
public static boolean 		Prime 		(long Num) {}

Array

	Definition: ONLY with primitive data types

String 	variableName[]
int 	variableName[]
char 	variableName[]
float 	variableName[]
double 	variableName[]


store values in an array int numbers[] 		= {0, 1, 2, 3, 4}; 
initialize a blank array int numbers[] 		= new int[5]; --> [0, 0, 0, 0, 0]
initialize a blank array String letters[] 	= new String[5]; --> [null, null, null, null, null]

	split("pattern"): it returns an array of strings divided by every pattern
	toCharArray():it separates the string into characters
	length:it returns the size of the array in an int

Integer

	Definition

	Integer num = new Integer(9);
	Integer num = 9;

	compareTo(Value): the same as the string
	getInteger(SystemValueName): get a value of the system
	intValue(): retuns to an int the Integer objects value
	parseInt(String): it return the int value of the string (If the string is not made by numbers it will return error)
	shortValue(): same as intValue but with short
	toString(): convert the int value to string
	valueOf(): it takes the value of one into another

Character

	isDigit(character):true if it is a digit

File

	Defining 
	File nameOfTheFile = new File (path);

Filewriter

	Defining

	FileWriter nameOfTheFileWriter= new FileWriter(NameOfTheFileWeWantToWriteIn);

	write(text): Write in the file what we want
	close: finish the filewriter

try{}catch(){}

	try soething and see if there is an excetion then do something

ArrayList

	Defining
	ArrayList<type> nameOfTheArrayList= new ArrayList<type>();

	Only with objects. To use with primitive data types

	byte - Byte
    	short - Short
    	int - Integer
    	long - Long
    	float - Float
    	double - Double
    	char - Character
    	boolean - Boolean

	add(source): add to the list
	add(int index, source):
	size(): it returns the number of cells of the arrayList (int)
	get()
	remove(int Index)
	remove("patern")
	indexOf("Element")
	lastIndexOf("Element")
	clear()
	isEmpty():returns true or false
	(ArrayList) nombreArrayList.clone();  We have to cast
	Object[] array = nombreArrayList.toArray(); 1.24 github
	toArray convert the arrayList into an array

		Example:

		ArrayList <Integer> nums = new ArrayList <Integer>();
		nums.add(58);
		nums.add(87);

		Integer[] numbers2 = (Integer[]) nums.toArray();
	
ListIterator

	Defining:
	ListIterator nameOfTheListIterator = nameOfTheArray.listIterator();

	next()
	previous()
	nextIndex()
	previousIndex()
	remove()
	set()


Class definition

	Defining
	public class nameOfClass{

	private typeOfVariable nameOfVariable

	public returnType nameOfMethod(enteredType){

	return whatWeWant

	}

	public void nameOfMethod(enteredType){

	this.enteredType

	}


	